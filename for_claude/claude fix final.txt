Implementation Instructions for Admin Property Management
Based on my review of your project files, some changes have already been implemented, but a few critical updates are still needed. Here's what you should do:
1. Update Profile Page for Admin Access (Missing)
Modify your app/profile/page.jsx file:
javascript// In the useEffect hook where you fetch properties
useEffect(() => {
  const fetchUserProperties = async (userId) => {
    if (!userId) {
      return;
    }

    try {
      // If user is admin, fetch all properties
      const endpoint = session?.user?.isAdmin 
        ? '/api/properties?admin=true'  // Use admin parameter
        : `/api/properties/user/${userId}`;
      
      const res = await fetch(endpoint);

      if (res.status === 200) {
        const data = await res.json();
        // For admin endpoint, we get { properties }
        const propertiesData = session?.user?.isAdmin ? data.properties : data;
        setProperties(propertiesData);
      }
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }
  };

  // Fetch user properties when session is available
  if (session?.user?.id) {
    fetchUserProperties(session.user.id);
  }
}, [session]);

// Later in your JSX where you render each property
// Add owner information for admins
{session?.user?.isAdmin && property.owner && (
  <p className="text-sm text-gray-600 mt-1">
    Owner: {typeof property.owner === 'object' 
      ? property.owner.username || property.owner.email 
      : 'Unknown user'}
  </p>
)}
2. Update Properties API Route for Admin Access (Missing)
Modify your app/api/properties/route.js file:
javascriptexport async function GET(request) {
  await connectDB();

  const isAdminRequest = request.nextUrl.searchParams.get("admin") === "true";
  
  // Get the session user for admin verification
  let isAdmin = false;
  if (isAdminRequest) {
    const sessionUser = await getSessionUser();
    isAdmin = sessionUser?.user?.isAdmin || false;
    
    // If non-admin tries to access admin endpoint, return error
    if (!isAdmin) {
      return new Response(JSON.stringify({ message: "Unauthorized" }), { 
        status: 401, 
        headers: { 'Content-Type': 'application/json' } 
      });
    }
  }

  // Regular pagination parameters
  const page = parseInt(request.nextUrl.searchParams.get("page") || "1", 10);
  const pageSize = parseInt(request.nextUrl.searchParams.get("pageSize") || "6", 10);
  const skip = (page - 1) * pageSize;

  // Different queries for admin vs regular
  let query = {};
  let properties;
  let total;

  if (isAdmin) {
    // Admins can see all properties
    total = await Property.countDocuments();
    properties = await Property.find()
      .populate('owner', 'username email') // Include owner details
      .skip(skip)
      .limit(pageSize);
  } else {
    // Regular users only see approved properties
    query = { status: "approved" };
    total = await Property.countDocuments(query);
    properties = await Property.find(query)
      .skip(skip)
      .limit(pageSize);
  }

  return new Response(JSON.stringify({ properties, total }), { 
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  });
}
3. Add Admin Controls to Property Detail Page (Missing)
Add this component to your app/properties/[id]/page.jsx file:
javascript// First import these at the top if not already there
import { useSession } from 'next-auth/react';
import { toast } from 'react-toastify';
import { deleteProperty } from '@/utils/propertyActions';

// Create AdminControls component
const AdminControls = ({ property }) => {
  const router = useRouter();
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDelete = async () => {
    // Use the utility function for deletion
    await deleteProperty(
      property._id,
      property.name,
      // On success callback
      () => router.push('/properties'),
      setIsDeleting
    );
  };

  return (
    <div className="bg-red-50 p-4 rounded-lg shadow-md mb-4">
      <h3 className="text-xl font-bold text-red-700 mb-2">Admin Controls</h3>
      <div className="flex flex-col space-y-2">
        <div className="flex justify-between items-center">
          <span>ID: {property._id}</span>
          <span className="px-2 py-1 rounded bg-blue-100 text-blue-800 text-sm">
            Status: {property.status || 'approved'}
          </span>
        </div>
        
        <div className="flex space-x-2 mt-2">
          <button
            onClick={handleDelete}
            disabled={isDeleting}
            className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition disabled:opacity-50"
          >
            {isDeleting ? 'Deleting...' : 'Delete Property'}
          </button>
          
          <Link
            href={`/admin`}
            className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition"
          >
            Back to Admin
          </Link>
        </div>
      </div>
    </div>
  );
};

// Then add this in your component rendering section
// Inside your PropertyPage component where you render the property
const { data: session } = useSession();

// Place this in the sidebar or somewhere appropriate:
{session?.user?.isAdmin && property && (
  <AdminControls property={property} />
)}